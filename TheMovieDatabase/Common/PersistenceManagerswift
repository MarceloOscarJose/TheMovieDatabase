//
//  PersistenceManager.swift
//  TheMovieDatabase
//
//  Created by Marcelo José on 27/05/2019.
//  Copyright © 2019 Marcelo José. All rights reserved.
//

import CoreData

class PersistenceManager: NSObject {

    static let shared = PersistenceManager()

    lazy var container: NSPersistentContainer = {
        let container = NSPersistentContainer(name: "TheMovieDatabase")
        
        container.loadPersistentStores(completionHandler: { (storeDescription, error) in
            if let error = error as NSError? {
                fatalError("Unresolved error \(error), \(error.userInfo)")
            }
        })
        return container
    }()

    func saveContext () {
        let context = container.viewContext

        if context.hasChanges {
            do {
                try context.save()
                print("saved successfully")
            } catch {
                let nserror = error as NSError
                fatalError("Unresolved error \(nserror), \(nserror.userInfo)")
            }
        }
    }

    func fetch<T: NSManagedObject>(_ objectType: T.Type, sortBy: [String], ascending: Bool) -> [T]? {
        let fetchRequest = NSFetchRequest<NSFetchRequestResult>(entityName: String(describing: objectType))
        fetchRequest.sortDescriptors = sortBy.map({
            return NSSortDescriptor(key: $0, ascending: ascending)
        })

        do {
            let fetchedObjects = try container.viewContext.fetch(fetchRequest) as? [T]
            return fetchedObjects ?? [T]()
        } catch {
            print(error)
            return nil
        }
    }

    func fetchById<T: NSManagedObject>(_ objectType: T.Type, idKey: String, id: String) -> T? {
        let fetchRequest = NSFetchRequest<NSFetchRequestResult>(entityName: String(describing: objectType))
        fetchRequest.predicate = NSPredicate(format: "\(idKey) = %@", id)

        do {
            let fetchedObject = try container.viewContext.fetch(fetchRequest).first as? T
            return fetchedObject ?? nil
        } catch {
            print(error)
            return nil
        }
    }
}
